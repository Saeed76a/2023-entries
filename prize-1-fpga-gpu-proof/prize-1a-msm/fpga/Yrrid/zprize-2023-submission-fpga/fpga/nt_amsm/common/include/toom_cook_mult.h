/***

Copyright (c) 2023-2024, Yrrid Software, Inc. All rights reserved.
Dual licensed under the MIT License or the Apache License, Version 2.0.
See LICENSE for details.

Author(s):  Tony Wu

***/

#pragma once

#include "hw_msm.h"

class toom_cook_mult {
public:
    // yeah yeah templates templates...
    static ap_uint<68> karatsuba_mult_34(ap_uint<34> a, ap_uint<34> b) {
#pragma HLS INLINE
        ap_uint<17> al = a(16, 0);
        ap_uint<17> ah = a(33, 17);
        ap_uint<17> bl = b(16, 0);
        ap_uint<17> bh = b(33, 17);
        ap_uint<34> z_0 = al * bl;
        ap_uint<34> z_2 = ah * bh;
        ap_uint<36> z_1 = (ap_int<18>(al) - ap_int<18>(ah)) * (ap_int<18>(bh) - ap_int<18>(bl)) + z_2 + z_0;
        ap_uint<68> res = (z_2, ap_uint<34>(0)) + (z_1, ap_uint<17>(0)) + z_0;
        return res;
    }

    // yeah yeah templates templates...
    static ap_uint<132> karatsuba_mult_66(ap_uint<66> a, ap_uint<66> b) {
#pragma HLS INLINE
        ap_uint<33> al = a(32, 0);
        ap_uint<33> ah = a(65, 33);
        ap_uint<33> bl = b(32, 0);
        ap_uint<33> bh = b(65, 33);
        ap_uint<66> z_0 = karatsuba_mult_34(al, bl);
        ap_uint<66> z_2 = karatsuba_mult_34(ah, bh);
        ap_uint<68> z_1 = karatsuba_mult_34(al + ah, bl + bh) - z_2 - z_0;
        ap_uint<132> res = (z_2, ap_uint<66>(0)) + (z_1, ap_uint<33>(0)) + z_0;
        return res;
    }

    // yeah yeah templates templates...
    static ap_uint<260> karatsuba_mult_130(ap_uint<130> a, ap_uint<130> b) {
#pragma HLS INLINE
        ap_uint<65> al = a(64, 0);
        ap_uint<65> ah = a(129, 65);
        ap_uint<65> bl = b(64, 0);
        ap_uint<65> bh = b(129, 65);
        ap_uint<130> z_0 = karatsuba_mult_66(al, bl);
        ap_uint<130> z_2 = karatsuba_mult_66(ah, bh);
        ap_uint<132> z_1 = karatsuba_mult_66(al + ah, bl + bh) - z_2 - z_0;
        ap_uint<260> res = (z_2, ap_uint<130>(0)) + (z_1, ap_uint<65>(0)) + z_0;
        return res;
    }

    static int e(ap_int<261> value, int start) {
#pragma HLS INLINE
        return value >> start;
    }

    static int e(ap_int<261> value, int stop, int start) {
#pragma HLS INLINE
        int mask = (1 << (stop - start + 1)) - 1;
        return value >> start & mask;
    }

    // NOTE: uses a lot more LUTs compared low latency mult
    static hls::vector<long, 16> mult(field_t a, field_t b) {
#pragma HLS INLINE
        ap_uint<129> a_split[3];
        a_split[0] = a(126, 0);
        a_split[1] = a(253, 127);
        a_split[2] = a(380, 254);
        ap_uint<129> b_split[3];
        b_split[0] = b(126, 0);
        b_split[1] = b(253, 127);
        b_split[2] = b(380, 254);
        ap_int<131> a_evals[5];
        ap_int<131> b_evals[5];
        ap_int<261> products[5];
        ap_int<261> results[5];

        a_evals[0] = a_split[0];
        a_evals[1] = a_split[2] + a_split[1] + a_split[0];
        a_evals[2] = a_split[2] - a_split[1] + a_split[0];
        a_evals[3] = (a_split[2] << 2) - (a_split[1] << 1) + a_split[0];
        a_evals[4] = a_split[2];

        b_evals[0] = b_split[0];
        b_evals[1] = b_split[2] + b_split[1] + b_split[0];
        b_evals[2] = b_split[2] - b_split[1] + b_split[0];
        b_evals[3] = (b_split[2] << 2) - (b_split[1] << 1) + b_split[0];
        b_evals[4] = b_split[2];

        bool sign_2 = a_evals[2].sign() ^ b_evals[2].sign();
        a_evals[2] = a_evals[2].sign() ? ap_int<131>(-a_evals[2]) : a_evals[2];
        b_evals[2] = b_evals[2].sign() ? ap_int<131>(-b_evals[2]) : b_evals[2];

        bool sign_3 = a_evals[3].sign() ^ b_evals[3].sign();
        a_evals[3] = a_evals[3].sign() ? ap_int<131>(-a_evals[3]) : a_evals[3];
        b_evals[3] = b_evals[3].sign() ? ap_int<131>(-b_evals[3]) : b_evals[3];

        products[0] = karatsuba_mult_130(a_evals[0], b_evals[0]);
        products[1] = karatsuba_mult_130(a_evals[1], b_evals[1]);
        products[2] = karatsuba_mult_130(a_evals[2], b_evals[2]);
        products[3] = karatsuba_mult_130(a_evals[3], b_evals[3]);
        products[4] = karatsuba_mult_130(a_evals[4], b_evals[4]);

        products[2] = sign_2 ? ap_int<261>(-products[2]) : products[2];

        if (sign_3) {
            products[3] = products[3] + products[1];
        } else {
            products[3] = products[3] - products[1];
            sign_3 = products[3].sign();
            products[3] = sign_3 ? ap_int<261>(-products[3]) : products[3];
        }
        products[3] = div_3_inline(products[3]);
        products[3] = sign_3 ? ap_int<261>(-products[3]) : products[3];

        long r0[11] = {0};
        long r1[11] = {0};
        long r2[11] = {0};
        long r3[11] = {0};
        long r4[11] = {0};

        // split products[0]
        r0[0] = e(products[0], 24, 0);
        for (int i = 1; i < 10; i++) {
#pragma HLS UNROLL
            r0[i] = e(products[0], 24 * i + 24, 24 * i + 1) << 1;
        }
        r0[10] = e(products[0], 241) << 1;

        // split products[1]
        r1[0] = e(products[1], 24, 0);
        for (int i = 1; i < 10; i++) {
#pragma HLS UNROLL
            r1[i] = e(products[1], 24 * i + 24, 24 * i + 1) << 1;
        }
        r1[10] = e(products[1], 241) << 1;

        // split products[2]
        r2[0] = e(products[2], 24, 0);
        for (int i = 1; i < 10; i++) {
#pragma HLS UNROLL
            r2[i] = e(products[2], 24 * i + 24, 24 * i + 1) << 1;
        }
        r2[10] = e(products[2], 241) << 1;

        // split products[3]
        r3[0] = e(products[3], 24, 0);
        for (int i = 1; i < 10; i++) {
#pragma HLS UNROLL
            r3[i] = e(products[3], 24 * i + 24, 24 * i + 1) << 1;
        }
        r3[10] = e(products[3], 241) << 1;

        // split products[4]
        r4[0] = e(products[4], 24, 0);
        for (int i = 1; i < 10; i++) {
#pragma HLS UNROLL
            r4[i] = e(products[4], 24 * i + 24, 24 * i + 1) << 1;
        }
        r4[10] = e(products[4], 241) << 1;

        for (int i = 0; i < 11; i++) {
#pragma HLS UNROLL
            r1[i] = (r1[i] - r2[i]) >> 1;
            r2[i] = r2[i] - r0[i];
            r3[i] = ((r2[i] - r3[i]) >> 1) + (r4[i] << 1);
            r2[i] = r2[i] + r1[i] - r4[i];
            r1[i] = r1[i] - r3[i];
        }

        hls::vector<long, 16> cols = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};

        cols[0] = r0[0] + ((r0[1] & 0xFFFFFF) << 24);
        cols[1] = (r0[1] >> 24) + r0[2] + ((r0[3] & 0xFFFFFF) << 24);
        cols[2] = (r0[3] >> 24) + r0[4] + ((r0[5] & 0xFFFFFF) << 24);
        cols[3] = (r0[5] >> 24) + r0[6] + ((r0[7] & 0xFFFFFF) << 24);
        cols[4] = (r0[7] >> 24) + r0[8] + ((r0[9] & 0xFFFFFF) << 24);
        cols[5] = (r0[9] >> 24) + r0[10];

        cols[2] += (r1[0] & 0x1FFFF) << 31;
        cols[3] += (r1[0] >> 17) + (r1[1] << 7) + ((r1[2] & 0x1FFFF) << 31);
        cols[4] += (r1[2] >> 17) + (r1[3] << 7) + ((r1[4] & 0x1FFFF) << 31);
        cols[5] += (r1[4] >> 17) + (r1[5] << 7) + ((r1[6] & 0x1FFFF) << 31);
        cols[6] = (r1[6] >> 17) + (r1[7] << 7) + ((r1[8] & 0x1FFFF) << 31);
        cols[7] = (r1[8] >> 17) + (r1[9] << 7) + ((r1[10] & 0x1FFFF) << 31);
        cols[8] = r1[10] >> 17;

        cols[5] += (r2[0] << 14) + ((r2[1] & 0x3FF) << 38);
        cols[6] += (r2[1] >> 10) + (r2[2] << 14) + ((r2[3] & 0x3FF) << 38);
        cols[7] += (r2[3] >> 10) + (r2[4] << 14) + ((r2[5] & 0x3FF) << 38);
        cols[8] += (r2[5] >> 10) + (r2[6] << 14) + ((r2[7] & 0x3FF) << 38);
        cols[9] = (r2[7] >> 10) + (r2[8] << 14) + ((r2[9] & 0x3FF) << 38);
        cols[10] = (r2[9] >> 10) + (r2[10] << 14);

        cols[7] += ((r3[0] & 0x07) << 45);
        cols[8] += (r3[0] >> 3) + (r3[1] << 21) + ((r3[2] & 0x07) << 45);
        cols[9] += (r3[2] >> 3) + (r3[3] << 21) + ((r3[4] & 0x07) << 45);
        cols[10] += (r3[4] >> 3) + (r3[5] << 21) + ((r3[6] & 0x07) << 45);
        cols[11] = (r3[6] >> 3) + (r3[7] << 21) + ((r3[8] & 0x07) << 45);
        cols[12] = (r3[8] >> 3) + (r3[9] << 21) + ((r3[10] & 0x07) << 45);
        cols[13] = (r3[10] >> 3);

        cols[10] += (r4[0] & 0xFFFFF) << 28;
        cols[11] += (r4[0] >> 20) + (r4[1] << 4) + ((r4[2] & 0xFFFFF) << 28);
        cols[12] += (r4[2] >> 20) + (r4[3] << 4) + ((r4[4] & 0xFFFFF) << 28);
        cols[13] += (r4[4] >> 20) + (r4[5] << 4) + ((r4[6] & 0xFFFFF) << 28);
        cols[14] = (r4[6] >> 20) + (r4[7] << 4) + ((r4[8] & 0xFFFFF) << 28);
        cols[15] = (r4[8] >> 20) + (r4[9] << 4) + ((r4[10] & 0xFFFFF) << 28);

        return cols;
    }


    static ap_uint<260> div_3_inline(ap_uint<260> a) {
#pragma HLS INLINE
        static const ap_uint<2> div_hi_lut[1024] = {
                0, 1, 2, 0, 1, 2, 0, 1,
                2, 0, 1, 2, 0, 1, 2, 0,
                1, 2, 0, 1, 2, 0, 1, 2,
                0, 1, 2, 0, 1, 2, 0, 1,
                2, 0, 1, 2, 0, 1, 2, 0,
                1, 2, 0, 1, 2, 0, 1, 2,
                0, 1, 2, 0, 1, 2, 0, 1,
                2, 0, 1, 2, 0, 1, 2, 0,
                1, 2, 0, 1, 2, 0, 1, 2,
                0, 1, 2, 0, 1, 2, 0, 1,
                2, 0, 1, 2, 0, 1, 2, 0,
                1, 2, 0, 1, 2, 0, 1, 2,
                0, 1, 2, 0, 1, 2, 0, 1,
                2, 0, 1, 2, 0, 1, 2, 0,
                1, 2, 0, 1, 2, 0, 1, 2,
                0, 1, 2, 0, 1, 2, 0, 1,
                2, 0, 1, 2, 0, 1, 2, 0,
                1, 2, 0, 1, 2, 0, 1, 2,
                0, 1, 2, 0, 1, 2, 0, 1,
                2, 0, 1, 2, 0, 1, 2, 0,
                1, 2, 0, 1, 2, 0, 1, 2,
                0, 1, 2, 0, 1, 2, 0, 1,
                2, 0, 1, 2, 0, 1, 2, 0,
                1, 2, 0, 1, 2, 0, 1, 2,
                0, 1, 2, 0, 1, 2, 0, 1,
                2, 0, 1, 2, 0, 1, 2, 0,
                1, 2, 0, 1, 2, 0, 1, 2,
                0, 1, 2, 0, 1, 2, 0, 1,
                2, 0, 1, 2, 0, 1, 2, 0,
                1, 2, 0, 1, 2, 0, 1, 2,
                0, 1, 2, 0, 1, 2, 0, 1,
                2, 0, 1, 2, 0, 1, 2, 0,
                1, 2, 0, 1, 2, 0, 1, 2,
                0, 1, 2, 0, 1, 2, 0, 1,
                2, 0, 1, 2, 0, 1, 2, 0,
                1, 2, 0, 1, 2, 0, 1, 2,
                0, 1, 2, 0, 1, 2, 0, 1,
                2, 0, 1, 2, 0, 1, 2, 0,
                1, 2, 0, 1, 2, 0, 1, 2,
                0, 1, 2, 0, 1, 2, 0, 1,
                2, 0, 1, 2, 0, 1, 2, 0,
                1, 2, 0, 1, 2, 0, 1, 2,
                0, 1, 2, 0, 1, 2, 0, 1,
                2, 0, 1, 2, 0, 1, 2, 0,
                1, 2, 0, 1, 2, 0, 1, 2,
                0, 1, 2, 0, 1, 2, 0, 1,
                2, 0, 1, 2, 0, 1, 2, 0,
                1, 2, 0, 1, 2, 0, 1, 2,
                0, 1, 2, 0, 1, 2, 0, 1,
                2, 0, 1, 2, 0, 1, 2, 0,
                1, 2, 0, 1, 2, 0, 1, 2,
                0, 1, 2, 0, 1, 2, 0, 1,
                2, 0, 1, 2, 0, 1, 2, 0,
                1, 2, 0, 1, 2, 0, 1, 2,
                0, 1, 2, 0, 1, 2, 0, 1,
                2, 0, 1, 2, 0, 1, 2, 0,
                1, 2, 0, 1, 2, 0, 1, 2,
                0, 1, 2, 0, 1, 2, 0, 1,
                2, 0, 1, 2, 0, 1, 2, 0,
                1, 2, 0, 1, 2, 0, 1, 2,
                0, 1, 2, 0, 1, 2, 0, 1,
                2, 0, 1, 2, 0, 1, 2, 0,
                1, 2, 0, 1, 2, 0, 1, 2,
                0, 1, 2, 0, 1, 2, 0, 1,
                2, 0, 1, 2, 0, 1, 2, 0,
                1, 2, 0, 1, 2, 0, 1, 2,
                0, 1, 2, 0, 1, 2, 0, 1,
                2, 0, 1, 2, 0, 1, 2, 0,
                1, 2, 0, 1, 2, 0, 1, 2,
                0, 1, 2, 0, 1, 2, 0, 1,
                2, 0, 1, 2, 0, 1, 2, 0,
                1, 2, 0, 1, 2, 0, 1, 2,
                0, 1, 2, 0, 1, 2, 0, 1,
                2, 0, 1, 2, 0, 1, 2, 0,
                1, 2, 0, 1, 2, 0, 1, 2,
                0, 1, 2, 0, 1, 2, 0, 1,
                2, 0, 1, 2, 0, 1, 2, 0,
                1, 2, 0, 1, 2, 0, 1, 2,
                0, 1, 2, 0, 1, 2, 0, 1,
                2, 0, 1, 2, 0, 1, 2, 0,
                1, 2, 0, 1, 2, 0, 1, 2,
                0, 1, 2, 0, 1, 2, 0, 1,
                2, 0, 1, 2, 0, 1, 2, 0,
                1, 2, 0, 1, 2, 0, 1, 2,
                0, 1, 2, 0, 1, 2, 0, 1,
                2, 0, 1, 2, 0, 1, 2, 0,
                1, 2, 0, 1, 2, 0, 1, 2,
                0, 1, 2, 0, 1, 2, 0, 1,
                2, 0, 1, 2, 0, 1, 2, 0,
                1, 2, 0, 1, 2, 0, 1, 2,
                0, 1, 2, 0, 1, 2, 0, 1,
                2, 0, 1, 2, 0, 1, 2, 0,
                1, 2, 0, 1, 2, 0, 1, 2,
                0, 1, 2, 0, 1, 2, 0, 1,
                2, 0, 1, 2, 0, 1, 2, 0,
                1, 2, 0, 1, 2, 0, 1, 2,
                0, 1, 2, 0, 1, 2, 0, 1,
                2, 0, 1, 2, 0, 1, 2, 0,
                1, 2, 0, 1, 2, 0, 1, 2,
                0, 1, 2, 0, 1, 2, 0, 1,
                2, 0, 1, 2, 0, 1, 2, 0,
                1, 2, 0, 1, 2, 0, 1, 2,
                0, 1, 2, 0, 1, 2, 0, 1,
                2, 0, 1, 2, 0, 1, 2, 0,
                1, 2, 0, 1, 2, 0, 1, 2,
                0, 1, 2, 0, 1, 2, 0, 1,
                2, 0, 1, 2, 0, 1, 2, 0,
                1, 2, 0, 1, 2, 0, 1, 2,
                0, 1, 2, 0, 1, 2, 0, 1,
                2, 0, 1, 2, 0, 1, 2, 0,
                1, 2, 0, 1, 2, 0, 1, 2,
                0, 1, 2, 0, 1, 2, 0, 1,
                2, 0, 1, 2, 0, 1, 2, 0,
                1, 2, 0, 1, 2, 0, 1, 2,
                0, 1, 2, 0, 1, 2, 0, 1,
                2, 0, 1, 2, 0, 1, 2, 0,
                1, 2, 0, 1, 2, 0, 1, 2,
                0, 1, 2, 0, 1, 2, 0, 1,
                2, 0, 1, 2, 0, 1, 2, 0,
                1, 2, 0, 1, 2, 0, 1, 2,
                0, 1, 2, 0, 1, 2, 0, 1,
                2, 0, 1, 2, 0, 1, 2, 0,
                1, 2, 0, 1, 2, 0, 1, 2,
                0, 1, 2, 0, 1, 2, 0, 1,
                2, 0, 1, 2, 0, 1, 2, 0,
                1, 2, 0, 1, 2, 0, 1, 2,
                0, 1, 2, 0, 1, 2, 0, 1,
                2, 0, 1, 2, 0, 1, 2, 0
        };

        static const ap_uint<32> div_rom[1024] = {
                715478016, 1790268416, -1430956032, 716527617, 1791318017, -1429906431, 717577218, 1792367618,
                -1428856830, 718626819, 1793417219, -1427807229, 719676420, 1794466820, -1426757628, 720726021,
                1795516421, -1425708027, 721775622, 1796566022, -1424658426, 722825223, 1797615623, -1423608825,
                723874824, 1798665224, -1422559224, 724924425, 1799714825, -1421509623, 725974026, 1800764426,
                -1420460022, 727023627, 1801814027, -1419410421, 728073228, 1802863628, -1418360820, 729122829,
                1803913229, -1417311219, 730172430, 1804962830, -1416261618, 731222031, 1806012431, -1415212017,
                732271632, 1807062032, -1414162416, 733321233, 1808111633, -1413112815, 734370834, 1809161234,
                -1412063214, 735420435, 1810210835, -1411013613, 736470036, 1811260436, -1409964012, 737519637,
                1812310037, -1408914411, 738569238, 1813359638, -1407864810, 739618839, 1814409239, -1406815209,
                740668440, 1815458840, -1405765608, 741718041, 1816508441, -1404716007, 742767642, 1817558042,
                -1403666406, 743817243, 1818607643, -1402616805, 744866844, 1819657244, -1401567204, 745916445,
                1820706845, -1400517603, 746966046, 1821756446, -1399468002, 748015647, 1822806047, -1398418401,
                749065248, 1823855648, -1397368800, 750114849, 1824905249, -1396319199, 751164450, 1825954850,
                -1395269598, 752214051, 1827004451, -1394219997, 753263652, 1828054052, -1393170396, 754313253,
                1829103653, -1392120795, 755362854, 1830153254, -1391071194, 756412455, 1831202855, -1390021593,
                757462056, 1832252456, -1388971992, 758511657, 1833302057, -1387922391, 759561258, 1834351658,
                -1386872790, 760610859, 1835401259, -1385823189, 761660460, 1836450860, -1384773588, 762710061,
                1837500461, -1383723987, 763759662, 1838550062, -1382674386, 764809263, 1839599663, -1381624785,
                765858864, 1840649264, -1380575184, 766908465, 1841698865, -1379525583, 767958066, 1842748466,
                -1378475982, 769007667, 1843798067, -1377426381, 770057268, 1844847668, -1376376780, 771106869,
                1845897269, -1375327179, 772156470, 1846946870, -1374277578, 773206071, 1847996471, -1373227977,
                774255672, 1849046072, -1372178376, 775305273, 1850095673, -1371128775, 776354874, 1851145274,
                -1370079174, 777404475, 1852194875, -1369029573, 778454076, 1853244476, -1367979972, 779503677,
                1854294077, -1366930371, 780553278, 1855343678, -1365880770, 781602879, 1856393279, -1364831169,
                782652480, 1857442880, -1363781568, 783702081, 1858492481, -1362731967, 784751682, 1859542082,
                -1361682366, 785801283, 1860591683, -1360632765, 786850884, 1861641284, -1359583164, 787900485,
                1862690885, -1358533563, 788950086, 1863740486, -1357483962, 789999687, 1864790087, -1356434361,
                791049288, 1865839688, -1355384760, 792098889, 1866889289, -1354335159, 793148490, 1867938890,
                -1353285558, 794198091, 1868988491, -1352235957, 795247692, 1870038092, -1351186356, 796297293,
                1871087693, -1350136755, 797346894, 1872137294, -1349087154, 798396495, 1873186895, -1348037553,
                799446096, 1874236496, -1346987952, 800495697, 1875286097, -1345938351, 801545298, 1876335698,
                -1344888750, 802594899, 1877385299, -1343839149, 803644500, 1878434900, -1342789548, 804694101,
                1879484501, -1341739947, 805743702, 1880534102, -1340690346, 806793303, 1881583703, -1339640745,
                807842904, 1882633304, -1338591144, 808892505, 1883682905, -1337541543, 809942106, 1884732506,
                -1336491942, 810991707, 1885782107, -1335442341, 812041308, 1886831708, -1334392740, 813090909,
                1887881309, -1333343139, 814140510, 1888930910, -1332293538, 815190111, 1889980511, -1331243937,
                816239712, 1891030112, -1330194336, 817289313, 1892079713, -1329144735, 818338914, 1893129314,
                -1328095134, 819388515, 1894178915, -1327045533, 820438116, 1895228516, -1325995932, 821487717,
                1896278117, -1324946331, 822537318, 1897327718, -1323896730, 823586919, 1898377319, -1322847129,
                824636520, 1899426920, -1321797528, 825686121, 1900476521, -1320747927, 826735722, 1901526122,
                -1319698326, 827785323, 1902575723, -1318648725, 828834924, 1903625324, -1317599124, 829884525,
                1904674925, -1316549523, 830934126, 1905724526, -1315499922, 831983727, 1906774127, -1314450321,
                833033328, 1907823728, -1313400720, 834082929, 1908873329, -1312351119, 835132530, 1909922930,
                -1311301518, 836182131, 1910972531, -1310251917, 837231732, 1912022132, -1309202316, 838281333,
                1913071733, -1308152715, 839330934, 1914121334, -1307103114, 840380535, 1915170935, -1306053513,
                841430136, 1916220536, -1305003912, 842479737, 1917270137, -1303954311, 843529338, 1918319738,
                -1302904710, 844578939, 1919369339, -1301855109, 845628540, 1920418940, -1300805508, 846678141,
                1921468541, -1299755907, 847727742, 1922518142, -1298706306, 848777343, 1923567743, -1297656705,
                849826944, 1924617344, -1296607104, 850876545, 1925666945, -1295557503, 851926146, 1926716546,
                -1294507902, 852975747, 1927766147, -1293458301, 854025348, 1928815748, -1292408700, 855074949,
                1929865349, -1291359099, 856124550, 1930914950, -1290309498, 857174151, 1931964551, -1289259897,
                858223752, 1933014152, -1288210296, 859273353, 1934063753, -1287160695, 860322954, 1935113354,
                -1286111094, 861372555, 1936162955, -1285061493, 862422156, 1937212556, -1284011892, 863471757,
                1938262157, -1282962291, 864521358, 1939311758, -1281912690, 865570959, 1940361359, -1280863089,
                866620560, 1941410960, -1279813488, 867670161, 1942460561, -1278763887, 868719762, 1943510162,
                -1277714286, 869769363, 1944559763, -1276664685, 870818964, 1945609364, -1275615084, 871868565,
                1946658965, -1274565483, 872918166, 1947708566, -1273515882, 873967767, 1948758167, -1272466281,
                875017368, 1949807768, -1271416680, 876066969, 1950857369, -1270367079, 877116570, 1951906970,
                -1269317478, 878166171, 1952956571, -1268267877, 879215772, 1954006172, -1267218276, 880265373,
                1955055773, -1266168675, 881314974, 1956105374, -1265119074, 882364575, 1957154975, -1264069473,
                883414176, 1958204576, -1263019872, 884463777, 1959254177, -1261970271, 885513378, 1960303778,
                -1260920670, 886562979, 1961353379, -1259871069, 887612580, 1962402980, -1258821468, 888662181,
                1963452581, -1257771867, 889711782, 1964502182, -1256722266, 890761383, 1965551783, -1255672665,
                891810984, 1966601384, -1254623064, 892860585, 1967650985, -1253573463, 893910186, 1968700586,
                -1252523862, 894959787, 1969750187, -1251474261, 896009388, 1970799788, -1250424660, 897058989,
                1971849389, -1249375059, 898108590, 1972898990, -1248325458, 899158191, 1973948591, -1247275857,
                900207792, 1974998192, -1246226256, 901257393, 1976047793, -1245176655, 902306994, 1977097394,
                -1244127054, 903356595, 1978146995, -1243077453, 904406196, 1979196596, -1242027852, 905455797,
                1980246197, -1240978251, 906505398, 1981295798, -1239928650, 907554999, 1982345399, -1238879049,
                908604600, 1983395000, -1237829448, 909654201, 1984444601, -1236779847, 910703802, 1985494202,
                -1235730246, 911753403, 1986543803, -1234680645, 912803004, 1987593404, -1233631044, 913852605,
                1988643005, -1232581443, 914902206, 1989692606, -1231531842, 915951807, 1990742207, -1230482241,
                917001408, 1991791808, -1229432640, 918051009, 1992841409, -1228383039, 919100610, 1993891010,
                -1227333438, 920150211, 1994940611, -1226283837, 921199812, 1995990212, -1225234236, 922249413,
                1997039813, -1224184635, 923299014, 1998089414, -1223135034, 924348615, 1999139015, -1222085433,
                925398216, 2000188616, -1221035832, 926447817, 2001238217, -1219986231, 927497418, 2002287818,
                -1218936630, 928547019, 2003337419, -1217887029, 929596620, 2004387020, -1216837428, 930646221,
                2005436621, -1215787827, 931695822, 2006486222, -1214738226, 932745423, 2007535823, -1213688625,
                933795024, 2008585424, -1212639024, 934844625, 2009635025, -1211589423, 935894226, 2010684626,
                -1210539822, 936943827, 2011734227, -1209490221, 937993428, 2012783828, -1208440620, 939043029,
                2013833429, -1207391019, 940092630, 2014883030, -1206341418, 941142231, 2015932631, -1205291817,
                942191832, 2016982232, -1204242216, 943241433, 2018031833, -1203192615, 944291034, 2019081434,
                -1202143014, 945340635, 2020131035, -1201093413, 946390236, 2021180636, -1200043812, 947439837,
                2022230237, -1198994211, 948489438, 2023279838, -1197944610, 949539039, 2024329439, -1196895009,
                950588640, 2025379040, -1195845408, 951638241, 2026428641, -1194795807, 952687842, 2027478242,
                -1193746206, 953737443, 2028527843, -1192696605, 954787044, 2029577444, -1191647004, 955836645,
                2030627045, -1190597403, 956886246, 2031676646, -1189547802, 957935847, 2032726247, -1188498201,
                958985448, 2033775848, -1187448600, 960035049, 2034825449, -1186398999, 961084650, 2035875050,
                -1185349398, 962134251, 2036924651, -1184299797, 963183852, 2037974252, -1183250196, 964233453,
                2039023853, -1182200595, 965283054, 2040073454, -1181150994, 966332655, 2041123055, -1180101393,
                967382256, 2042172656, -1179051792, 968431857, 2043222257, -1178002191, 969481458, 2044271858,
                -1176952590, 970531059, 2045321459, -1175902989, 971580660, 2046371060, -1174853388, 972630261,
                2047420661, -1173803787, 973679862, 2048470262, -1172754186, 974729463, 2049519863, -1171704585,
                975779064, 2050569464, -1170654984, 976828665, 2051619065, -1169605383, 977878266, 2052668666,
                -1168555782, 978927867, 2053718267, -1167506181, 979977468, 2054767868, -1166456580, 981027069,
                2055817469, -1165406979, 982076670, 2056867070, -1164357378, 983126271, 2057916671, -1163307777,
                984175872, 2058966272, -1162258176, 985225473, 2060015873, -1161208575, 986275074, 2061065474,
                -1160158974, 987324675, 2062115075, -1159109373, 988374276, 2063164676, -1158059772, 989423877,
                2064214277, -1157010171, 990473478, 2065263878, -1155960570, 991523079, 2066313479, -1154910969,
                992572680, 2067363080, -1153861368, 993622281, 2068412681, -1152811767, 994671882, 2069462282,
                -1151762166, 995721483, 2070511883, -1150712565, 996771084, 2071561484, -1149662964, 997820685,
                2072611085, -1148613363, 998870286, 2073660686, -1147563762, 999919887, 2074710287, -1146514161,
                1000969488, 2075759888, -1145464560, 1002019089, 2076809489, -1144414959, 1003068690, 2077859090,
                -1143365358, 1004118291, 2078908691, -1142315757, 1005167892, 2079958292, -1141266156, 1006217493,
                2081007893, -1140216555, 1007267094, 2082057494, -1139166954, 1008316695, 2083107095, -1138117353,
                1009366296, 2084156696, -1137067752, 1010415897, 2085206297, -1136018151, 1011465498, 2086255898,
                -1134968550, 1012515099, 2087305499, -1133918949, 1013564700, 2088355100, -1132869348, 1014614301,
                2089404701, -1131819747, 1015663902, 2090454302, -1130770146, 1016713503, 2091503903, -1129720545,
                1017763104, 2092553504, -1128670944, 1018812705, 2093603105, -1127621343, 1019862306, 2094652706,
                -1126571742, 1020911907, 2095702307, -1125522141, 1021961508, 2096751908, -1124472540, 1023011109,
                2097801509, -1123422939, 1024060710, 2098851110, -1122373338, 1025110311, 2099900711, -1121323737,
                1026159912, 2100950312, -1120274136, 1027209513, 2101999913, -1119224535, 1028259114, 2103049514,
                -1118174934, 1029308715, 2104099115, -1117125333, 1030358316, 2105148716, -1116075732, 1031407917,
                2106198317, -1115026131, 1032457518, 2107247918, -1113976530, 1033507119, 2108297519, -1112926929,
                1034556720, 2109347120, -1111877328, 1035606321, 2110396721, -1110827727, 1036655922, 2111446322,
                -1109778126, 1037705523, 2112495923, -1108728525, 1038755124, 2113545524, -1107678924, 1039804725,
                2114595125, -1106629323, 1040854326, 2115644726, -1105579722, 1041903927, 2116694327, -1104530121,
                1042953528, 2117743928, -1103480520, 1044003129, 2118793529, -1102430919, 1045052730, 2119843130,
                -1101381318, 1046102331, 2120892731, -1100331717, 1047151932, 2121942332, -1099282116, 1048201533,
                2122991933, -1098232515, 1049251134, 2124041534, -1097182914, 1050300735, 2125091135, -1096133313,
                1051350336, 2126140736, -1095083712, 1052399937, 2127190337, -1094034111, 1053449538, 2128239938,
                -1092984510, 1054499139, 2129289539, -1091934909, 1055548740, 2130339140, -1090885308, 1056598341,
                2131388741, -1089835707, 1057647942, 2132438342, -1088786106, 1058697543, 2133487943, -1087736505,
                1059747144, 2134537544, -1086686904, 1060796745, 2135587145, -1085637303, 1061846346, 2136636746,
                -1084587702, 1062895947, 2137686347, -1083538101, 1063945548, 2138735948, -1082488500, 1064995149,
                2139785549, -1081438899, 1066044750, 2140835150, -1080389298, 1067094351, 2141884751, -1079339697,
                1068143952, 2142934352, -1078290096, 1069193553, 2143983953, -1077240495, 1070243154, 2145033554,
                -1076190894, 1071292755, 2146083155, -1075141293, 1072342356, 2147132756, -1074091692, 1073391957
        };

        static const ap_uint<18> mod_seq_rom[1024] = {
                0, 682, 341, 0, 1704, 1366, 1025, 1704,
                2388, 2050, 2729, 2388, 0, 682, 341, 0,
                5792, 5466, 5125, 5792, 6488, 6150, 6817, 6488,
                4100, 4770, 4441, 4100, 5792, 5466, 5125, 5792,
                10576, 10250, 10917, 10576, 8200, 8870, 8529, 8200,
                9892, 9554, 9225, 9892, 10576, 10250, 10917, 10576,
                0, 682, 341, 0, 1704, 1366, 1025, 1704,
                2388, 2050, 2729, 2388, 0, 682, 341, 0,
                22144, 21866, 21525, 22144, 22888, 22550, 23169, 22888,
                20500, 21122, 20841, 20500, 22144, 21866, 21525, 22144,
                26976, 26650, 27269, 26976, 24600, 25222, 24929, 24600,
                26244, 25954, 25625, 26244, 26976, 26650, 27269, 26976,
                16400, 17034, 16741, 16400, 18056, 17766, 17425, 18056,
                18788, 18450, 19081, 18788, 16400, 17034, 16741, 16400,
                22144, 21866, 21525, 22144, 22888, 22550, 23169, 22888,
                20500, 21122, 20841, 20500, 22144, 21866, 21525, 22144,
                43328, 43050, 43669, 43328, 41000, 41622, 41281, 41000,
                42644, 42306, 42025, 42644, 43328, 43050, 43669, 43328,
                32800, 33434, 33093, 32800, 34456, 34118, 33825, 34456,
                35140, 34850, 35481, 35140, 32800, 33434, 33093, 32800,
                38544, 38218, 37925, 38544, 39240, 38950, 39569, 39240,
                36900, 37522, 37193, 36900, 38544, 38218, 37925, 38544,
                43328, 43050, 43669, 43328, 41000, 41622, 41281, 41000,
                42644, 42306, 42025, 42644, 43328, 43050, 43669, 43328,
                0, 682, 341, 0, 1704, 1366, 1025, 1704,
                2388, 2050, 2729, 2388, 0, 682, 341, 0,
                5792, 5466, 5125, 5792, 6488, 6150, 6817, 6488,
                4100, 4770, 4441, 4100, 5792, 5466, 5125, 5792,
                10576, 10250, 10917, 10576, 8200, 8870, 8529, 8200,
                9892, 9554, 9225, 9892, 10576, 10250, 10917, 10576,
                0, 682, 341, 0, 1704, 1366, 1025, 1704,
                2388, 2050, 2729, 2388, 0, 682, 341, 0,
                87552, 87466, 87125, 87552, 88488, 88150, 88577, 88488,
                86100, 86530, 86441, 86100, 87552, 87466, 87125, 87552,
                92576, 92250, 92677, 92576, 90200, 90630, 90529, 90200,
                91652, 91554, 91225, 91652, 92576, 92250, 92677, 92576,
                82000, 82442, 82341, 82000, 83464, 83366, 83025, 83464,
                84388, 84050, 84489, 84388, 82000, 82442, 82341, 82000,
                87552, 87466, 87125, 87552, 88488, 88150, 88577, 88488,
                86100, 86530, 86441, 86100, 87552, 87466, 87125, 87552,
                108928, 108650, 109077, 108928, 106600, 107030, 106881, 106600,
                108052, 107906, 107625, 108052, 108928, 108650, 109077, 108928,
                98400, 98842, 98693, 98400, 99864, 99718, 99425, 99864,
                100740, 100450, 100889, 100740, 98400, 98842, 98693, 98400,
                103952, 103818, 103525, 103952, 104840, 104550, 104977, 104840,
                102500, 102930, 102793, 102500, 103952, 103818, 103525, 103952,
                108928, 108650, 109077, 108928, 106600, 107030, 106881, 106600,
                108052, 107906, 107625, 108052, 108928, 108650, 109077, 108928,
                65600, 66090, 65941, 65600, 67112, 66966, 66625, 67112,
                67988, 67650, 68137, 67988, 65600, 66090, 65941, 65600,
                71200, 71066, 70725, 71200, 72088, 71750, 72225, 72088,
                69700, 70178, 70041, 69700, 71200, 71066, 70725, 71200,
                76176, 75850, 76325, 76176, 73800, 74278, 74129, 73800,
                75300, 75154, 74825, 75300, 76176, 75850, 76325, 76176,
                65600, 66090, 65941, 65600, 67112, 66966, 66625, 67112,
                67988, 67650, 68137, 67988, 65600, 66090, 65941, 65600,
                87552, 87466, 87125, 87552, 88488, 88150, 88577, 88488,
                86100, 86530, 86441, 86100, 87552, 87466, 87125, 87552,
                92576, 92250, 92677, 92576, 90200, 90630, 90529, 90200,
                91652, 91554, 91225, 91652, 92576, 92250, 92677, 92576,
                82000, 82442, 82341, 82000, 83464, 83366, 83025, 83464,
                84388, 84050, 84489, 84388, 82000, 82442, 82341, 82000,
                87552, 87466, 87125, 87552, 88488, 88150, 88577, 88488,
                86100, 86530, 86441, 86100, 87552, 87466, 87125, 87552,
                174336, 174250, 174677, 174336, 172200, 172630, 172289, 172200,
                173652, 173314, 173225, 173652, 174336, 174250, 174677, 174336,
                164000, 164442, 164101, 164000, 165464, 165126, 165025, 165464,
                166148, 166050, 166489, 166148, 164000, 164442, 164101, 164000,
                169552, 169226, 169125, 169552, 170248, 170150, 170577, 170248,
                168100, 168530, 168201, 168100, 169552, 169226, 169125, 169552,
                174336, 174250, 174677, 174336, 172200, 172630, 172289, 172200,
                173652, 173314, 173225, 173652, 174336, 174250, 174677, 174336,
                131200, 131690, 131349, 131200, 132712, 132374, 132225, 132712,
                133396, 133250, 133737, 133396, 131200, 131690, 131349, 131200,
                136800, 136474, 136325, 136800, 137496, 137350, 137825, 137496,
                135300, 135778, 135449, 135300, 136800, 136474, 136325, 136800,
                141584, 141450, 141925, 141584, 139400, 139878, 139537, 139400,
                140900, 140562, 140425, 140900, 141584, 141450, 141925, 141584,
                131200, 131690, 131349, 131200, 132712, 132374, 132225, 132712,
                133396, 133250, 133737, 133396, 131200, 131690, 131349, 131200,
                153152, 152874, 152725, 153152, 153896, 153750, 154177, 153896,
                151700, 152130, 151849, 151700, 153152, 152874, 152725, 153152,
                157984, 157850, 158277, 157984, 155800, 156230, 155937, 155800,
                157252, 156962, 156825, 157252, 157984, 157850, 158277, 157984,
                147600, 148042, 147749, 147600, 149064, 148774, 148625, 149064,
                149796, 149650, 150089, 149796, 147600, 148042, 147749, 147600,
                153152, 152874, 152725, 153152, 153896, 153750, 154177, 153896,
                151700, 152130, 151849, 151700, 153152, 152874, 152725, 153152,
                174336, 174250, 174677, 174336, 172200, 172630, 172289, 172200,
                173652, 173314, 173225, 173652, 174336, 174250, 174677, 174336,
                164000, 164442, 164101, 164000, 165464, 165126, 165025, 165464,
                166148, 166050, 166489, 166148, 164000, 164442, 164101, 164000,
                169552, 169226, 169125, 169552, 170248, 170150, 170577, 170248,
                168100, 168530, 168201, 168100, 169552, 169226, 169125, 169552,
                174336, 174250, 174677, 174336, 172200, 172630, 172289, 172200,
                173652, 173314, 173225, 173652, 174336, 174250, 174677, 174336,
                0, 682, 341, 0, 1704, 1366, 1025, 1704,
                2388, 2050, 2729, 2388, 0, 682, 341, 0,
                5792, 5466, 5125, 5792, 6488, 6150, 6817, 6488,
                4100, 4770, 4441, 4100, 5792, 5466, 5125, 5792,
                10576, 10250, 10917, 10576, 8200, 8870, 8529, 8200,
                9892, 9554, 9225, 9892, 10576, 10250, 10917, 10576,
                0, 682, 341, 0, 1704, 1366, 1025, 1704,
                2388, 2050, 2729, 2388, 0, 682, 341, 0,
                22144, 21866, 21525, 22144, 22888, 22550, 23169, 22888,
                20500, 21122, 20841, 20500, 22144, 21866, 21525, 22144,
                26976, 26650, 27269, 26976, 24600, 25222, 24929, 24600,
                26244, 25954, 25625, 26244, 26976, 26650, 27269, 26976,
                16400, 17034, 16741, 16400, 18056, 17766, 17425, 18056,
                18788, 18450, 19081, 18788, 16400, 17034, 16741, 16400,
                22144, 21866, 21525, 22144, 22888, 22550, 23169, 22888,
                20500, 21122, 20841, 20500, 22144, 21866, 21525, 22144,
                43328, 43050, 43669, 43328, 41000, 41622, 41281, 41000,
                42644, 42306, 42025, 42644, 43328, 43050, 43669, 43328,
                32800, 33434, 33093, 32800, 34456, 34118, 33825, 34456,
                35140, 34850, 35481, 35140, 32800, 33434, 33093, 32800,
                38544, 38218, 37925, 38544, 39240, 38950, 39569, 39240,
                36900, 37522, 37193, 36900, 38544, 38218, 37925, 38544,
                43328, 43050, 43669, 43328, 41000, 41622, 41281, 41000,
                42644, 42306, 42025, 42644, 43328, 43050, 43669, 43328,
                0, 682, 341, 0, 1704, 1366, 1025, 1704,
                2388, 2050, 2729, 2388, 0, 682, 341, 0,
                5792, 5466, 5125, 5792, 6488, 6150, 6817, 6488,
                4100, 4770, 4441, 4100, 5792, 5466, 5125, 5792,
                10576, 10250, 10917, 10576, 8200, 8870, 8529, 8200,
                9892, 9554, 9225, 9892, 10576, 10250, 10917, 10576,
                0, 682, 341, 0, 1704, 1366, 1025, 1704,
                2388, 2050, 2729, 2388, 0, 682, 341, 0
        };

        static const ap_uint<2> mod_lut[32] = {
                0, 1, 2, 0, 1, 2, 0, 1,
                2, 0, 1, 2, 0, 1, 2, 0,
                0, 1, 2, 0, 1, 2, 0, 1,
                2, 0, 1, 2, 0, 1, 2, 0
        };

        static const ap_uint<2> mod_lut_pair[64] = {
                0, 1, 2, 0, 1, 2, 0, 1,
                2, 0, 1, 2, 0, 1, 2, 0,
                1, 2, 0, 1, 2, 0, 1, 2,
                0, 1, 2, 0, 1, 2, 0, 1,
                2, 0, 1, 2, 0, 1, 2, 0,
                1, 2, 0, 1, 2, 0, 1, 2,
                0, 1, 2, 0, 1, 2, 0, 1,
                2, 0, 1, 2, 0, 1, 2, 0
        };
#pragma HLS BIND_STORAGE variable=div_hi_lut type=ROM_NP impl=LUTRAM
#pragma HLS BIND_STORAGE variable=div_rom type=ROM_NP impl=BRAM
#pragma HLS BIND_STORAGE variable=mod_seq_rom type=ROM_NP impl=BRAM
#pragma HLS BIND_STORAGE variable=mod_lut type=ROM_NP impl=LUTRAM
#pragma HLS BIND_STORAGE variable=mod_lut_pair type=ROM_NP impl=LUTRAM

        mp_int_t<10, 260> split(a);
        mp_int_t<2, 52> divs_hi;
        mp_int_t<10, 270> res;

        for (int i = 0; i < 26; i++) {
#pragma HLS UNROLL
            divs_hi[i] = div_hi_lut[split[i]];
        }

        divs_hi[26] = 0;

        mp_int_t<2, 18> mods;
        for (int i = 8; i >= 0; i--) {
#pragma HLS UNROLL
            ap_uint<2> idx_0 = divs_hi[3 * i];
            ap_uint<2> idx_1 = divs_hi[3 * i + 1];
            ap_uint<2> idx_2 = divs_hi[3 * i + 2];
            ap_uint<6> lut_idx = (idx_2, idx_1, idx_0);
            mods[i] = mod_lut_pair[lut_idx];
        }

        ap_uint<10> mod_seq_lo_idx = ap_uint<10>(mods.to_ap_uint());
        ap_uint<8> mod_seq_hi_idx = ap_uint<8>(mods.to_ap_uint() >> 10);
        ap_uint<10> mod_seq_lo = mod_seq_rom[mod_seq_lo_idx](9, 0);
        ap_uint<8> mod_seq_hi = mod_seq_rom[mod_seq_hi_idx](17, 10);
        ap_uint<18> mod_seq = (mod_seq_hi, mod_seq_lo);

        mp_int_t<32, 864> divs;
        for (int i = 0; i < 26; i++) {
#pragma HLS UNROLL
            divs[i] = div_rom[split[i]];
        }

        for (int i = 0; i < 9; i++) {
#pragma HLS UNROLL
            ap_uint<2> mod_1 = (mod_seq >> i * 2);
            ap_uint<5> mod_2 = mod_lut[mod_1 * 4 | divs_hi[i * 3 + 2]];
            ap_uint<6> mod_3 = mod_lut_pair[mod_1 * 16 | divs_hi[i * 3 + 2] * 4 | divs_hi[i * 3 + 1]];
            res[3 * i + 2] = (divs[3 * i + 2] >> mod_1 * 10) & 0x3FF;
            res[3 * i + 1] = (divs[3 * i + 1] >> mod_2 * 10) & 0x3FF;
            res[3 * i + 0] = (divs[3 * i + 0] >> mod_3 * 10) & 0x3FF;
        }
        return res.to_ap_uint();
    }
};
